from aiogram import types
from aiogram.fsm.context import FSMContext
from keyboards.main_keyboards import create_kb
from menu.states import States
from redis_cash.other import main_dict
from redis_cash.redis_client import QuizRedis


class KbButtons:
    CMD_MENU = {
        'main_menu': '–ú–µ–Ω—é'
    }
    MAIN_MENU = {
        'select_new_course': '–ù–æ–≤—ã–π –∫—É—Ä—Å',
        'solve_quizzes': '–†–µ—à–∞—Ç—å –∫–≤–∏–∑—ã',
        'languages_select_lang': '–ò–∑—É—á–∞—Ç—å —è–∑—ã–∫–∏',
        'init_tips': 'Tips',
    }
    BACK_MAIN_MENU = {
        'back_main_menu': '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'
    }

    CREATE_COURSE_PROGRAM = {
        'running_course': '‚úÖ–°–æ–∑–¥–∞—Ç—å –∫—É—Ä—Å'
    }


async def main_menu(msg: types.Message, state: FSMContext):
    main_menu_msg = await msg.answer('–ú–µ–Ω—é üëã',
                                     reply_markup=create_kb(KbButtons.MAIN_MENU)
                                     )
    await state.update_data(main_menu_msg=main_menu_msg)


async def back_main_menu(cb: types.CallbackQuery, state: FSMContext, addit_text=''):
    await state.clear()
    main_menu_msg = await cb.message.edit_text(f'{addit_text}\n\n–ú–µ–Ω—é üëã',
                                               reply_markup=create_kb(  KbButtons.MAIN_MENU)
                                               )
    await state.update_data(main_menu_msg=main_menu_msg)


async def select_new_course(cb: types.CallbackQuery, state: FSMContext):
    await state.set_state(States.wait_theme_from_user)
    await state.update_data(main_msg_id=cb.message.message_id)
    await cb.message.edit_text('–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–º—É',
                               reply_markup=create_kb(KbButtons.BACK_MAIN_MENU))


async def continue_training(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.edit_text('–ö–Ω–æ–ø–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
                               reply_markup=create_kb(KbButtons.BACK_MAIN_MENU))


async def init_tips(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ',
                               reply_markup=create_kb(
                                   {'tips_topic_code': '–ü—Ä–æ–≥—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ',
                                    'tips_any_topic': '–î—Ä—É–≥–∞—è —Ç–µ–º–∞',
                                    **KbButtons.BACK_MAIN_MENU}
                                    )
                               )


async def solve_quizzes(cb: types.CallbackQuery, state: FSMContext):
    data = QuizRedis(cb.from_user.id)
    await state.set_state(States.wait_topic_for_quizzes)

    data.remove_user_data()
    data.init_counter()
    data.set_message(data.MAIN_MSG, cb.message)

    await cb.message.edit_text('–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –ø–æ—Ä–µ—à–∞–µ–º –∫–≤–∏–∑—ã ü§ì\n\n'
                               '–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–º—É, –∞ —è —Å–æ—Å—Ç–∞–≤–ª—é –¥–ª—è –≤–∞—Å –∫–≤–∏–∑—ã',
                               reply_markup=create_kb(KbButtons.BACK_MAIN_MENU))


async def languages_select_lang(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π —è–∑—ã–∫ –±—É–¥–µ—Ç–µ –∏–∑—É—á–∞—Ç—å',
                               reply_markup=create_kb({
                                   'select_lang_eng': '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π',
                                   'select_lang_fr': '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π',
                                   'select_lang_grm': '–ù–µ–º–µ—Ü–∫–∏–π',
                                   'select_lang_chi': '–ö–∏—Ç–∞–π—Å–∫–∏–π',
                                   'select_lang_jap': '–Ø–ø–æ–Ω—Å–∫–∏–π',
                                   **KbButtons.BACK_MAIN_MENU
                               }))